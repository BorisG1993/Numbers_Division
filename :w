#include "criteria.h"




Criterion_2_1::Criterion_2_1(const Partition& partition): 
    n(partition.n), k(partition.k), S(partition.S), p(partition.p) {
    pow_2 = get_pow(2);
    middle = S/2.0;
    is_S_even = (S % 2 == 0);
    rounded_middle = static_cast<int>(std::floor(std::abs(middle)));
    couples = n - rounded_middle;
    gap_pow_twos = pow_2 - couples;
    calc_reminders();  
    calc_leftovers();
}


void Criterion_2_1::calc_reminders() {
    Reminder x {"x", n - couples*2, is_S_even ? rounded_middle -1 : rounded_middle, gap_pow_twos};
    Reminder y {"y", rounded_middle + 1, n, gap_pow_twos};
    reminders.push_back(x); 
    reminders.push_back(y);
    if (is_S_even) {
        Reminder mid {"mid", rounded_middle, rounded_middle, 1};
        reminders.push_back(mid);
    }
}


void Criterion_2_1::calc_leftovers() {
    for (int i = 1; i < n - couples*2 - 1; ++i) {
        leftovers.push_back(i);
    }
}


int Criterion_2_1::get_pow(const int& num) {
   return std::count_if(p.begin(), p.end(), [&num] (int x) {return x == num; });
}



std::vector<RemindersUsage> Criterion_2_1::get_reminders_dependency(const int& num) {

}
